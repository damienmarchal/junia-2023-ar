#include <iostream>
#include<vector>

enum class Etat {
	libre,robot,arbre,obstacle
};

std::ostream& operator<<(std::ostream& s, Etat& e){
    switch(e){
        case Etat::libre:
            s<<"libre";
            break;
        case Etat::robot:
            s<<"robot";
            break;
        case Etat::arbre:
            s<<"arbre";
            break;
        case Etat::obstacle:
            s<<" mur ";
            break;
    };
    return s;
}


class Environment {
    public:
        int size_x;
        int size_y;
	    std::vector<std::vector<Etat>> map_etat;

        Environment(int size_x,int size_y){
            this->size_x=size_x;
            this->size_y=size_y;

            for (int y=0;y<size_y;y++){
                this->map_etat.push_back({});
                for(int x=0;x<size_x;x++){
                    this->map_etat[y].push_back(Etat::libre);
                }
            }
        }
};

std::ostream& operator<<(std::ostream& s,Environment& map){
    for (int y=0; y<map.size_y; y++){
        for(int x=0; x<map.size_x; x++){
            s<<map.map_etat[y][x] << " | ";
            
        }
        s<<std::endl;
    };
    return s;
}


int main(int argc, char**argv){
    Environment* map = new Environment(10,10);
    map->map_etat[0][0]=Etat::robot;
    map->map_etat[1][1]=Etat::obstacle;
    std::cout << *map << std::endl;
}
